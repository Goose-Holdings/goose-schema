// jsv-index.min.js
function renderTree(obj, container) {
  const ul = document.createElement('ul');
  ul.style.listStyle = 'none';
  ul.style.paddingLeft = '1em';
  for (const key in obj) {
    const li = document.createElement('li');
    const value = obj[key];
    if (typeof value === 'object' && value !== null) {
      const details = document.createElement('details');
      const summary = document.createElement('summary');
      summary.textContent = key;
      details.appendChild(summary);
      details.appendChild(renderTree(value, container));
      li.appendChild(details);
    } else {
      li.innerHTML = `<strong>${key}</strong>: ${value}`;
    }
    ul.appendChild(li);
  }
  return ul;
}

function renderDocs(schema, container) {
  container.innerHTML = '';
  const defs = schema.definitions || {};
  for (const [name, def] of Object.entries(defs)) {
    const section = document.createElement('section');
    section.style.marginBottom = '2em';
    const title = document.createElement('h3');
    title.textContent = name;
    section.appendChild(title);
    const table = document.createElement('table');
    table.style.borderCollapse = 'collapse';
    table.style.width = '100%';
    const head = `<tr><th style="text-align:left;border-bottom:1px solid #ccc;">Property</th><th style="text-align:left;border-bottom:1px solid #ccc;">Type</th><th style="text-align:left;border-bottom:1px solid #ccc;">Enum</th></tr>`;
    table.innerHTML = head;
    for (const [prop, meta] of Object.entries(def.properties || {})) {
      const row = document.createElement('tr');
      row.innerHTML = `<td style="padding:4px 6px;">${prop}</td><td style="padding:4px 6px;">${meta.type || ''}</td><td style="padding:4px 6px;">${(meta.enum || []).join(', ')}</td>`;
      table.appendChild(row);
    }
    section.appendChild(table);
    container.appendChild(section);
  }
}

export function render(schema, container) {
  container.innerHTML = '';
  container.appendChild(renderTree(schema, container));
}

export function renderDocsMode(schema, container) {
  renderDocs(schema, container);
}
